// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Boglistesystem.Models
{
    public partial class BLSystemContext : DbContext
    {
        public BLSystemContext()
        {
        }

        public BLSystemContext(DbContextOptions<BLSystemContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Bog> Bøger { get; set; }
        public virtual DbSet<BogHold> BogHolds { get; set; }
        public virtual DbSet<Fag> Fags { get; set; }
        public virtual DbSet<Hold> Holds { get; set; }
        public virtual DbSet<Koordinator> Koordinators { get; set; }
        public virtual DbSet<Semestre> Semestres { get; set; }
        public virtual DbSet<Uddannelse> Uddannelses { get; set; }
        public virtual DbSet<Underviser> Undervisers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=BLSystem;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BogHold>(entity =>
            {
                entity.HasOne(d => d.Bog)
                    .WithMany(p => p.BogHolds)
                    .HasForeignKey(d => d.Bog_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__BogHold__Bog_id__2F9A1060");

                entity.HasOne(d => d.Hold)
                    .WithMany(p => p.BogHolds)
                    .HasForeignKey(d => d.Hold_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__BogHold__Hold_id__3552E9B6");
            });

            modelBuilder.Entity<Hold>(entity =>
            {
                entity.Property(e => e.Navn).IsFixedLength();

                entity.HasOne(d => d.Fag)
                    .WithMany(p => p.Holds)
                    .HasForeignKey(d => d.Fag_id)
                    .HasConstraintName("FK__Hold__Fag_id__382F5661");

                entity.HasOne(d => d.Koordinator)
                    .WithMany(p => p.Holds)
                    .HasForeignKey(d => d.Koordinator_id)
                    .HasConstraintName("FK__Hold__Koordinato__3DE82FB7");

                entity.HasOne(d => d.Semestre)
                    .WithMany(p => p.Holds)
                    .HasForeignKey(d => d.Semestre_id)
                    .HasConstraintName("FK__Hold__Semestre_i__40C49C62");

                entity.HasOne(d => d.Uddannelse)
                    .WithMany(p => p.Holds)
                    .HasForeignKey(d => d.Uddannelse_id)
                    .HasConstraintName("FK__Hold__Uddannelse__43A1090D");

                entity.HasOne(d => d.Underviser)
                    .WithMany(p => p.Holds)
                    .HasForeignKey(d => d.Underviser_id)
                    .HasConstraintName("FK__Hold__Underviser__477199F1");
            });

            modelBuilder.Entity<Underviser>(entity =>
            {
                entity.HasOne(d => d.Koordinator)
                    .WithMany(p => p.Undervisers)
                    .HasForeignKey(d => d.Koordinator_id)
                    .HasConstraintName("FK__Undervise__Koord__467D75B8");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}